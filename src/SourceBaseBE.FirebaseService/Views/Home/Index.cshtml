@{
  Layout = null;
}

<!DOCTYPE html>
<!--
Copyright (c) 2016 Google Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<html>
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Firebase Cloud Messaging</title>
  <!-- Material Design Theming -->
  <link rel="stylesheet" href="https://code.getmdl.io/1.1.3/material.orange-indigo.min.css">
  <link rel="stylesheet" href="https://fonts.googleapis.com/icon?family=Material+Icons">
  <script defer src="https://code.getmdl.io/1.1.3/material.min.js"></script>
  <link rel="stylesheet" href="~/css/main.css">
  <script src="~/lib/jquery/dist/jquery.js"></script>
  @*<link rel="manifest" href="/manifest.json">*@
</head>
<body>
  <div class="demo-layout mdl-layout mdl-js-layout mdl-layout--fixed-header">
    <!-- Header section containing title -->
    <header class="mdl-layout__header mdl-color-text--white mdl-color--light-blue-700">
      <div class="mdl-cell mdl-cell--12-col mdl-cell--12-col-tablet mdl-grid">
        <div class="mdl-layout__header-row mdl-cell mdl-cell--12-col mdl-cell--12-col-tablet mdl-cell--8-col-desktop">
          <h3>Firebase Cloud Messaging - Client</h3>
        </div>
      </div>
    </header>
    <main class="mdl-layout__content mdl-color--grey-100">
      <div class="mdl-cell mdl-cell--12-col mdl-cell--12-col-tablet mdl-grid">
        <!-- Container for the Table of content -->
        <div class="mdl-card mdl-shadow--2dp mdl-cell mdl-cell--12-col mdl-cell--12-col-tablet mdl-cell--12-col-desktop">
          <div class="mdl-card__supporting-text mdl-color-text--grey-600">
            <!-- div to display the generated Instance ID token -->
            <div id="token_div" style="display: none;">
              <h4>Instance ID Token</h4>
              <p id="token" style="word-break: break-all;"></p>
              <button class="mdl-button mdl-js-button mdl-button--raised mdl-button--colored"
                      onclick="deleteToken()">
                Delete Token
              </button>
            </div>
            <!-- div to display the UI to allow the request for permission to
            notify the user. This is shown if the app has not yet been
            granted permission to notify. -->
            <div id="permission_div" style="display: none;">
              <h4>Needs Permission</h4>
              <p id="token"></p>
              <button class="mdl-button mdl-js-button mdl-button--raised mdl-button--colored"
                      onclick="requestPermission()">
                Request Permission
              </button>
            </div>
            <!-- div to display messages received by this app. -->
            <div id="messages"></div>
          </div>
        </div>
      </div>
    </main>
  </div>
  <!-- Import and configure the Firebase SDK -->
  <!-- These scripts are made available when the app is served or deployed on Firebase Hosting -->
  <!-- If you do not serve/host your project using Firebase Hosting see https://firebase.google.com/docs/web/setup -->
  <script src="https://www.gstatic.com/firebasejs/4.5.2/firebase.js"></script>
  <script>

    // IDs of divs that display Instance ID token UI or request permission UI.
    const tokenDivId = 'token_div';
    const permissionDivId = 'permission_div';
    var token = null;
    var messaging = null;


    // Initialize Firebase
    const config = {
      apiKey: "AIzaSyDAtF96MFuMt8-nL389Vv7hdt3GhCdzKeM",
      authDomain: "attendance-98e22.firebaseapp.com",
      projectId: "attendance-98e22",
      storageBucket: "attendance-98e22.appspot.com",
      messagingSenderId: "83253767218",
      appId: "1:83253767218:web:46bc26d8aa31280157202b"
    };
    firebase.initializeApp(config);

    messaging = firebase.messaging();

    messaging.onMessage(function (payload) {
      console.log("Message received. ", payload);
      appendMessage(payload);
    });

    function requestPermission() {
      console.log('Requesting permission...');
      messaging.requestPermission()
        .then(function () {
          console.log('Notification permission granted.');
        })
        .catch(function (err) {
          console.log('Unable to get permission to notify.', err);
        });
    }

    function registerToken() {
      showToken('loading...');
      messaging.getToken()
        .then(function (currentToken) {
          if (currentToken) {
            console.log("token:   " + currentToken);
            sendTokenToServer(currentToken);
            updateUIForPushEnabled(currentToken);
          } else {
            console.log('No Instance ID token available. Request permission to generate one.');
            requestPermission();
          }
        })
        .catch(function (err) {
          console.log('An error occurred while retrieving token. ', err);
          showToken('Error retrieving Instance ID token. ', err);
          requestPermission();
        });
    }

    function deleteToken() {
      messaging.getToken()
        .then(function (currentToken) {
          messaging.deleteToken(currentToken)
            .then(function () {
              alert('Token deleted.');
              sendTokenToServer('');
              updateUIForPushPermissionRequired();
            })
            .catch(function (err) {
              alert('Unable to delete token. ', err);
            });
        })
        .catch(function (err) {
          alert('Error retrieving Instance ID token. ', err);
        });
    }

    // currentToken = window.localStorage.getItem('SourceBaseBE_token');
    // if (currentToken != undefined && currentToken != '') {
    //   updateUIForPushEnabled(currentToken);
    // }
    // else
    {
      if (true) {// TODO: allow register
        registerToken();
      }
    }

    function showToken(currentToken) {
      // Show token in console and UI.
      var tokenElement = document.querySelector('#token');
      tokenElement.textContent = currentToken;
    }

    function sendTokenToServer(currentToken) {
      window.localStorage.setItem('SourceBaseBE_token', currentToken);
      console.log('Sending token to server...');
      token = currentToken;
      $.post("@Url.Action("StoreToken", "Home")", { token: currentToken });
    }

    function showHideDiv(divId, show) {
      const div = document.querySelector('#' + divId);
      if (show) {
        div.style = "display: visible";
      } else {
        div.style = "display: none";
      }
    }

    function updateUIForPushEnabled(currentToken) {
      showHideDiv(tokenDivId, true);
      showHideDiv(permissionDivId, false);
      showToken(currentToken);
    }

    function updateUIForPushPermissionRequired() {
      showHideDiv(tokenDivId, false);
      showHideDiv(permissionDivId, true);
    }

  </script>
</body>
</html>